package main

import (
	"fmt"
	"math"
)

func main() {
	fmt.Println("Task 1")
	// Дана сторона квадрата a. Найти его периметр P = 4·a.
	a1 := 5
	P1 := 4 * a1
	fmt.Printf("Периметр квадрата = %v\n", P1)

	fmt.Print("\nTask 2\n")
	//Дана сторона квадрата a. Найти его площадь S = a
	b1 := 4
	S1 := b1 * b1
	fmt.Printf("Площадь квадрата = %v\n", S1)

	fmt.Println("\nTask 3")
	//Даны стороны прямоугольника a и b. Найти его площадь S = a·b и периметр P = 2·(a + b)
	a2 := 7
	b2 := 9

	S2 := a2 * b2
	P2 := 2 * (a2 + b2)
	fmt.Printf("Площадь прямоугольника = %v, Периметр прямоугольника = %v\n", S2, P2)

	fmt.Println("\nTask 4")
	//Дан диаметр окружности d. Найти ее длину L = π·d. В качестве значения π использовать 3.14

	d := 6.5
	pi := 3.14

	L1 := d * pi
	fmt.Printf("Длина окружности = %v\n", L1)

	fmt.Println("\nTask 5")
	//Дана длина ребра куба a. Найти объем куба V = a3 и площадь его поверхности S = 6·a

	l := 4
	V1 := l * l * l
	S3 := 6 * l

	fmt.Printf("Объем куба = %v, Длина поверхности куба = %v\n", V1, S3)

	fmt.Println("\nTask 6")
	// Даны длины ребер a, b, c прямоугольного параллелепипеда. Найти его объем V = a·b·c и площадь поверхности S = 2·(a·b + b·c + a·c)

	a3 := 7
	b3 := 8
	c1 := 9

	V2 := a3 * b3 * c1
	S4 := 2 * (a3*b3 + b3*c1 + a3*c1)

	fmt.Printf("Объем параллелепипида = %v, Площадь его поверхности = %v\n", V2, S4)

	fmt.Println("\nTask 7")
	//Найти длину окружности L и площадь круга S заданного радиуса R: L = 2·π·R, S = π·R. В качестве значения π использовать 3.14.
	R1 := 0.6
	L2 := 2 * pi * R1
	S5 := R1 * pi
	fmt.Printf("Длина окружности = %v, Площадь круга = %v\n", L2, S5)

	fmt.Println("\nTask 8")
	//Даны два числа a и b. Найти их среднее арифметическое: (a + b)/2
	a4 := 6
	b4 := 9
	M := (a4 + b4) / 2

	fmt.Printf("Среднее арифметическое = %v\n", M)

	fmt.Println("\nTask 9")
	//Даны два неотрицательных числа a и b. Найти их среднее геометрическое, то есть квадратный корень из их произведения: √a·b
	x1 := 8.9
	y1 := 7.5
	G := math.Sqrt(x1 * y1)

	fmt.Printf("Среднее геометрическое = %.2f\n", G)

	fmt.Println("\nTask 10")
	//Даны два ненулевых числа. Найти сумму, разность, произведение и частное их квадратов.
	var a5, b5 float64
	fmt.Println("Введите первое число")
	fmt.Scanln(&a5)
	fmt.Println("Введите второе число")
	fmt.Scanln(&b5)

	a5Squared := a5 * a5
	b5Squared := b5 * b5
	sumSquares := a5Squared + b5Squared
	diffSquares := a5Squared - b5Squared
	prodSquares := a5Squared * b5Squared
	quotientSquares := a5Squared / b5Squared

	fmt.Printf("Сумма квадратов: %.2f\n", sumSquares)
	fmt.Printf("Разность квадратов: %.2f\n", diffSquares)
	fmt.Printf("Произведение квадратов: %.2f\n", prodSquares)
	fmt.Printf("Частное квадратов: %.2f\n", quotientSquares)

	fmt.Println("\nTask 11")
	//Дано расстояние L в сантиметрах. Используя операцию деления нацело, найти количество полных метров в нем (1 метр = 100 см)
	L := 2300
	m := L / 100

	fmt.Printf("Количество полных метров = %v\n", m)

	fmt.Println("\nTask 12")
	// Дана масса M в килограммах. Используя операцию деления нацело, найти количество полных тонн в ней (1 тонна = 1000 кг).
	var weight int64
	fmt.Println("Введите массу в кг")
	fmt.Scanln(&weight)
	ton := weight / 1000
	fmt.Printf("В %v кг, содержится %v тонн", weight, ton)

	fmt.Println("\nTask 13")
	// Дан размер файла в байтах. Используя операцию деления нацело, найти количество полных килобайтов, которые занимает данный файл (1 килобайт = 1024 байта)
	var sizeFile int
	fmt.Println("Введите количество байтов")
	fmt.Scanln(&sizeFile)
	Kb := sizeFile / 1024
	fmt.Printf("В %v байтах, содержится %v KB\n", sizeFile, Kb)

	fmt.Println("\nTask 14")
	// Даны целые положительные числа A и B (A > B). На отрезке длины A размещено максимально возможное количество отрезков длины B (без наложений).
	//Используя операцию деления нацело, найти количество отрезков B, размещенных на отрезке A

	var A, B uint32
	A = 190
	B = 130
	total := A / B
	fmt.Printf("Количество отрезков = %v\n", total)

	fmt.Println("\nTask 15")
	//Даны целые положительные числа A и B (A > B). На отрезке длины A размещено максимально возможное количество отрезков длины B (без наложений).
	//Используя операцию взятия остатка от деления нацело, найти длину незанятой части отрезка A.

	var D, C uint32
	D = 320
	C = 120

	total2 := D % C
	fmt.Printf("Незанятая часть отрезка = %v\n", total2)

}
